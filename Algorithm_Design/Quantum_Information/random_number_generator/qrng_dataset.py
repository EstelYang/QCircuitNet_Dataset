from qiskit.qasm3 import dump
import argparse
from qrng_generation import create_qrng_circuit
from qrng_utils import *
from qrng_post_processing import run_and_analyze


def save_qasm(circuit, filename):
    """Saves a circuit to a QASM 3.0 file."""

    with open(f"{filename}", "w") as file:
        dump(circuit, file)


def generate_circuit_qasm():
    """Generates QASM files for the QRNG algorithm."""
    for n in range(1, 134):
        circuit = create_qrng_circuit(n)
        filename = f"qrng_n{n}.qasm"
        save_qasm(circuit, filename)


def generate_dataset_json():
    """Generates a JSON dataset for the Algorithm.
    Format: {"input": description, "output": circuit}

    """
    # Replace the placeholder in the description with the qubit number
    # Create the json file with different entries.
    pass


def check_dataset():
    """Verify the dataset generated by the QRNG."""
    text = []
    aer_sim = AerSimulator(method="statevector")

    for n in range(2, 8):
        print_and_save(f"Verifying QRNG for n = {n}", text)
        filename = f"qrng_n{n}.qasm"
        with open(filename, "r") as qasmfile:
            qasm_code = qasmfile.read()

        circuit = verify_qasm_syntax(qasm_code)
        if circuit is None:
            continue

        times = 100
        trials = 2**n * times
        print_and_save(f"    Testing 2^{n} * {times} times", text)
        data = []
        for _ in range(trials):
            data.append(run_and_analyze(circuit, aer_sim))
        # print_and_save(f"      Data: {data}", text)
        chi2_stat, chi2_p = frequency_test(data, n)
        auto_corr = autocorrelation_test(data)
        entropy_val = entropy_test(data)
        rng_valid = chi2_p > 0.05 and abs(auto_corr) < 0.05 and entropy_val > n - 0.5
        print_and_save(
            f"      Chi-Squared Test: Statistic={chi2_stat}, P-value={chi2_p}",
            text,
        )
        print_and_save(f"       Autocorrelation Coefficient: {auto_corr}", text)
        print_and_save(f"       Entropy: {entropy_val} bits", text)
        print_and_save(f"       RNG Valid: {rng_valid}", text)

    with open("qrng_verification.txt", "w") as file:
        text = [line + "\n" for line in text]
        file.write("".join(text))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-f",
        "--func",
        choices=["qasm", "json"],
        help="The function to call: generate qasm circuit or json dataset.",
    )
    args = parser.parse_args()
    if args.func == "qasm":
        generate_circuit_qasm()
    elif args.func == "json":
        generate_dataset_json()


if __name__ == "__main__":
    main()
